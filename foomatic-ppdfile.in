#!@PERL@
# -*- perl -*-

# Foomatic PPD file generator for manual PPD generation (via "-p",
# "-d", "-A", and "-P" command line options) or for automatic
# on-the-fly PPD generation by CUPS 1.2 or newer (via "cat" and "list"
# command line options).

use Foomatic::Defaults;
use Foomatic::DB;
use Getopt::Std;
use Data::Dumper;
#use strict;

my $debug = 0;

# Use program name as the first part of the PPD URI for CUPS (should be 
# "foomatic").
$0 =~ m!/([^/]+)\s*$!;
my $progname = ($1 || $0);

# Default settings for listing PPDs by cups-driverd

# List only the PPD file with the reconmmended driver for each printer
# and do not show "(recommended)" in the CUPS web interface. This mode
# makes CUPS setup with the web interface very easy for beginners.
# This can be set by "OnlyRecommended Yes" or "OnlyRecommended No" in
# /etc/cups/foomatic.conf
my $onlyrecommended = 0;
# The Foomatic database does not only generate PPD files from Foomatic
# XML data but also of ready-made PPDs mainly from printer manufacturers
# for their PostScript printers. As these PPDs are often also linked to
# the directories in which CUPS links directly to PPD files, duplicate
# listing of these PPDs by CUPS would result. Therefore we suppress
# listing the ready-made PPDs. This behaviour can be changed by using
# "ListReadyMadePPDs Yes" or "ListReadyMadePPDs No" in
# /etc/cups/foomatic.conf
my $listreadymadeppds = 0;
help() if !@ARGV;
#my ($opt_h, $opt_d, $opt_p, $opt_N, $opt_A, $opt_P, $opt_w);
getopts("AP:d:p:N:hwt:");
help() if $opt_h;
my $drv = $opt_d;
my $poid   = $opt_p;
my $showall   = $opt_A;
my $showmatch   = $opt_P;
help() if ($#ARGV > 1) && !($poid) && !($ARGV[0] =~ /^export$/i);

# We need the MCE module only if the '-N' option is used
if ($opt_N) {
    require MCE;
    MCE->import;
}

if ($ARGV[0] =~ /^list$/i) {
    # List all available PPD files (format for cups-driverd)
    cupslistppds();
} elsif ($ARGV[0] =~ /^cat$/i) {
    # Generate and return the selected PPD file (cups-driverd command line)
    generateppd($ARGV[1]);
} elsif ($ARGV[0] =~ /^export$/i) {
    # Generate and save all PPD files
    exportppds($showmatch);
} elsif ($showall or $showmatch) {
    # List all PPD files or files matching regexp (manual operation)
    foomaticlistppds($showmatch);
} elsif ($poid) {
    # Generate and return the selected PPD file (manual operation)
    generateppd($poid, $drv);
} else {
    help();
}

exit(0);

sub parse_cups_foomatic_conf {

    # Read configuration in /etc/cups/foomatic.conf
    my $conffilename;
    if (my $cupsserverroot = $ENV{CUPS_SERVERROOT}) {
        $conffilename = "$cupsserverroot/foomatic.conf";
    } else {
        $conffilename = "/etc/cups/foomatic.conf";
    }
    my $onlyrecommended = 0;
    my $listreadymadeppds = 0;
    if (-r $conffilename and
	open CONF, "< $conffilename") {
	while (my $line = <CONF>) {
	    chomp $line;
	    if ($line =~
		/^\s*OnlyRecommended\s+(Yes|On|True|1)\s*$/i) {
		$onlyrecommended = 1;
	    } elsif ($line =~
		     /^\s*OnlyRecommended\s+(No|Off|False|0)\s*$/i) {
		$onlyrecommended = 0;
	    }
	    if ($line =~
		/^\s*ListReadyMadePPDs\s+(Yes|On|True|1)\s*$/i) {
		$listreadymadeppds = 1;
	    } elsif ($line =~
		     /^\s*ListReadyMadePPDs\s+(No|Off|False|0)\s*$/i) {
		$listreadymadeppds = 0;
	    }
	}
	close CONF;
    }

    return ($onlyrecommended, $listreadymadeppds);

}

sub cupslistppds {

    my ($onlyrecommended, $listreadymadeppds) = parse_cups_foomatic_conf();

    my $db = Foomatic::DB->new();
    $db->get_overview(1, 1 + $listreadymadeppds);

    for my $printer (@{$db->{'overview'}}) {
	my $poid = $printer->{'id'};
	my $make = $printer->{'make'};
	my $model = $printer->{'model'};
	my $recdriver = $printer->{'driver'};
	my @drivers = @{$printer->{'drivers'}};
	my $id = $printer->{'ieee'};

	# No drivers => No PPDs
	next if $#drivers < 0;

	# Put the reconmmended driver to the beginning of list, as CUPS
	# probably will take the first PPD which matches the printer model
	my @sorteddrivers;
	if (Foomatic::DB::member($recdriver, @drivers)) {
	    # Valid entry for the recommended driver
	    push(@sorteddrivers, $recdriver);
	    if (!$onlyrecommended) {
		foreach my $driver (@drivers) {
		    push(@sorteddrivers, $driver) if $driver ne $recdriver;
		}
	    }
	} else {
	    # Invalid entry for the recommended driver
	    next if $onlyrecommended;
	    undef $recdriver;
	    @sorteddrivers = @drivers;
	}

	# Go through all the drivers and list the PPD entries
	foreach my $driver (@sorteddrivers) {
	    # Get PPD header data from the PPD file generator
	    my ($ieee1284,$pnpmake,$pnpmodel,$filename,$longname,
		$drivername,$nickname,$modelname) =
		    Foomatic::DB::getppdheaderdata($printer, $driver, 
						   ($onlyrecommended ? '' :
						    $printer->{'driver'}));
	    print "\"$progname:$printer->{'id'}-$driver.ppd\" en \"$make\" \"$nickname\" \"$ieee1284\"\n";
	}
    }
}

sub foomaticlistppds {

    my ($match) = @_;

    my $db = Foomatic::DB->new();
    $db->get_overview();
    my @drivers = $db->get_driverlist();

    for my $printer (@{$db->{'overview'}}) {
	my $pr = $printer->{'make'};
	my $model = $printer->{'model'};
	my $name = "$pr $model";
	my $driver = ($printer->{'driver'} || "No Default Driver");
	my $dlist = "";
	my $dcount = 0;
	if( $printer->{'drivers'} ){
	    $dcount = @{$printer->{'drivers'}};
	    for my $d (@{$printer->{'drivers'}}) {
		$dlist .= "$d ";
	    }
	}
	if (not $match or "$name" =~ m{$match}o) {
	    print "$name Id='$printer->{'id'}' Driver='$driver'";
	    if ($dcount > 1){
		print " CompatibleDrivers='$dlist'";
	    }
	    print "\n";
	}
    }
}

sub ppd_text_from_poid_and_driver {

    my ($db, $poid, $driver) = @_;

    # We expect this function to be called with a real driver name
    die "ERROR: $progname: bad driver '$driver' for printer '$poid'\n"  if (!$driver || ($driver =~ /(default|recommended)/i));

    my @drvlist = $db->get_drivers_for_printer($poid, 1);
    my $found = 0;
    if (@drvlist) {
	for my $d (@drvlist) {
	    last if ($found = ($driver eq $d));
	}
	warn "ERROR: $progname: Printer '$poid' and driver '$driver' are not compatible\n" if (!$found);
    }
    $found = 0;
    for my $d (@drivers) {
        last if ($found = ($driver eq $d));
    }
    print STDERR "DEBUG: $progname: Driver '$driver' not in database!\n" if (!$found) and $debug;

    # Get all the data about this driver/printer pair,
    # stop if the printer is not supported by the given driver
    if (!$db->getdat($driver, $poid)) {
        warn "ERROR: $progname: The printer '$poid' is not supported by the driver '$driver':\n$db->{'log'}";
        return;
    }

    # Stop if the driver entry has an empty command line prototype or if there
    # is no custom PPD file
    if ((!$db->{'dat'}{'cmd'}) && (!$db->{'dat'}{'ppdfile'})) {
        warn "ERROR: $progname: There is neither a custom PPD file nor the driver database entry contains sufficient data to build a PPD file.\n";
        return;
    }

    my @data = $db->getppd($opt_w);

    if (!@data) {
        warn "ERROR: $progname: No PPD file for printer '$poid' and driver '$driver'!\n";
        return;
    }

    return @data;

}

sub generateppd {

    my ($ppduri, $driver) = @_;
    my $poid;

    my $db = Foomatic::DB->new();
    my $printer;
    my @drivers = $db->get_driverlist();

    if ($ppduri =~ /^$progname:(.*)\.ppd$/) {
	# cups-driverd operation
	# We try to split between printer name and driver name at all
	# dashes in the PPD file name, as some drivers (ex. hpijs-pcl3)
	# have dashes in their names.
	my $ppdname = $1;
	my @poidcomponents = split(/-/, $ppdname);
	my @drivercomponents = ();
	my @printers = $db->get_printerlist();
	while ($#poidcomponents > 1) {
	    unshift(@drivercomponents, pop(@poidcomponents));
	    $driver = join('-', @drivercomponents);
	    $printer = join('-', @poidcomponents);
	    my @driver_printers = $db->get_printers_for_driver ($driver);
	    next if ((!Foomatic::DB::member($driver, @drivers) or
		      !Foomatic::DB::member($printer, @printers)) and
		     !Foomatic::DB::member($printer, @driver_printers));
	    $poid = $printer;
	    last;
	}
	die "ERROR: Could not determine driver name for $ppdname.ppd!\n"
	    if( !$poid );
    } else {
	# manual operation
	$poid = $ppduri;
    }

    # If the user supplies an old numerical printer ID, translate it to
    # a new clear-text ID
    $poid = Foomatic::DB::translate_printer_id($poid);

    my $lcname = lc( $poid );
    my $pentry = $db->get_printer($poid);

    print STDERR "DEBUG: Printer '$poid' not found!\n" if ($debug && not defined $pentry );
    print STDERR "DEBUG: $progname: Found $pentry->{id}\nDEBUG2: $progname: " .
	join ("\nDEBUG2: $progname: ", split(/\n/, Dumper($pentry))) .
	"\n" if $debug;
    
    if (!$driver || ($driver =~ /(default|recommended)/i)) {
	$driver = $pentry->{'driver'};
	if( not defined( $driver ) ){
	    die "ERROR: $progname: Printer '$poid' does not have default driver!\n";
	}
    }

    @data = ppd_text_from_poid_and_driver($db, $poid, $driver);
    die  if (!@data);
    print @data;

}

sub export_ppds_for_printer {

    my ($db, $onlyrecommended, $match, $printer) = @_;

    my $poid = $printer->{'id'};
    my $model = $printer->{'model'};
    my $pr = $printer->{'make'};
    my $recdriver = $printer->{'driver'};

    # we skip unmatching printers here to simplify
    # the for-loop code in the calling function
    return  if ($match and not ("$pr $model" =~ m{$match}o));

    my @drivers = ();
    if (!$onlyrecommended) {
        push (@drivers, @{$printer->{'drivers'}});
    } elsif (Foomatic::DB::member($recdriver, @{$printer->{'drivers'}})) {
        push (@drivers, $recdriver);
    } # else: no (valid) recommended driver => empty driver list => no output for this printer

    foreach my $driver (@drivers) {

        @data = ppd_text_from_poid_and_driver($db, $poid, $driver);

        # If there is some trouble with the ppd file,
        # `ppd_text_from_poid_and_driver` will print a warning,
        # so we can just skip the entry and continue.
        next  if (!@data);

        # create "make" directory
        my $filename = $pr =~ s/[^a-zA-z0-9_.-]+//gr;
        mkdir $filename;
        # create "model" subdirectory
        $filename .= "/";
        $filename .= $model =~ s/[^a-zA-z0-9_.-]+//gr;
        mkdir $filename;
        # prepare filename
        $filename .= "/$poid-$driver.ppd";

        # write target file
        open(filehandle, '>', "$filename")  or  die "error: $filename: failed to open target ppd file\n";
        print filehandle @data;
        close(filehandle);
        print STDOUT "$pr\t$model\t$poid\t$driver\t$filename\n";

    }

}

sub exportppds {

    my ($match) = @_;

    my ($onlyrecommended, $listreadymadeppds) = parse_cups_foomatic_conf();
    my $db = Foomatic::DB->new();
    $db->get_overview(1, 1 + $listreadymadeppds);

    if ($opt_N) {
        my $mce = MCE->new(max_workers => int($opt_N));
        $mce->foreach($db->{'overview'}, sub { export_ppds_for_printer($db, $onlyrecommended, $match, $_); } );
        die  if ($mce->status);
    } else {
        export_ppds_for_printer($db,$onlyrecommended, $match, $_)  foreach (@{$db->{'overview'}});
    }

}

sub help {
    print <<HELP;

$progname -A
$progname -P <regexpr>
$progname -p <printerid> [-d <driver>] [-w]
$progname list
$progname cat <CUPS PPD URI> [-w]
$progname [-N <proc-count>] [-w] export
$progname [-N <proc-count>] [-w] -P <regexpr> export
$progname -h

 -A             : show all Printer ID's and compatible drivers
 -P <regexpr>   : show/export all Printer ID's whose names and model
                  matched by the RE.  For example:
                   -P HP will match all names with HP in them
 -p <printerid> : Printer ID
 -d <driver>    : Driver name
                  If the driver is not specified then the default driver 
                  for the <printerid> is used.
 list           : List all possible PPDs in the format needed by the
                  cups-driverd
 cat <CUPS PPD URI> : Generate PPD file appropriate to the <CUPS PPD URI>.
                  Available CUPS PPD URIs are listed by 
                  "$progname list".
 export         : Export all possible PPDs into make/model subdirectories
                  (make/model names will be reduced to subset of aciss
                  characters to avoid filesystem troubles)
 -N <proc-count> : Parallelize PPD export by spawning the given
                   number of processes (requires perl 'MCE' module)
 -w             : Generate PPD which is compatible with the CUPS PostScript
                  driver for Windows (GUI strings are limited to 39 
                  characters).
 -h             : show help information


HELP
	exit 1;

}
